@page "/login"

@inject FirebaseAuthService AuthService
@inject NavigationManager NavigationManager

@if (!isAuthenticated)
{
    <div class="logincontainer">
        <h2>Iniciar sesión</h2>

        <EditForm Model="usuarioLogin" OnValidSubmit="Loguear">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <button type="button" class="btn-google" @onclick="LoginGoogle">
                    <img src="/img/logos/googleicono.png" alt="Google logo">
                    Iniciar sesión con Google
                </button>
            </div>

            <div class="divider">O</div>

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" type="text" @bind-Value="usuarioLogin.Email" placeholder="you@example.com" />
                <ValidationMessage For="@(() => usuarioLogin.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Contraseña</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="usuarioLogin.Password" placeholder="Tu contraseña" />
                <ValidationMessage For="@(() => usuarioLogin.Password)" />
            </div>

            <div class="form-group">
                <label>Recordar Contraseña</label>
                <InputCheckbox @bind-Value="remenberPassword" />
            </div>

            <button class="btn-login" type="submit">Ingresar</button>
        </EditForm>

        <div class="register-link">
            ¿No tienes una cuenta?
            <button class="btn-register" @onclick="Registrarse">Registrarse</button>
        </div>

        <button type="button" class="btn-forgot-password" @onclick="ResetearPassword">Olvidé mi contraseña</button>
    </div>
}
else
{
    <button class="btn-logout" @onclick="Desloguear">Cerrar sesión</button>
}

@code {
    private bool isAuthenticated = false;
    bool remenberPassword { get; set; } = false;
    private UsuarioLogin usuarioLogin = new UsuarioLogin();

    private async Task Loguear()
    {
        var userId = await AuthService.SignInWithEmailPassword(usuarioLogin.Email, usuarioLogin.Password);
        isAuthenticated = await AuthService.IsUserAuthenticated();

        if (isAuthenticated)
        {
            NavigationManager.NavigateTo("/"); // Redirige a la página de inicio
        }
       

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();
    }

    private async Task Desloguear()
    {
        AuthService.SignOut();
        isAuthenticated = false;
        StateHasChanged();
    }

    private async Task LoginGoogle()
    {
        // var userId = await AuthService.SignInWithGoogle();
        isAuthenticated = await AuthService.IsUserAuthenticated();
        StateHasChanged();
    }

    private void ResetearPassword()
    {
        NavigationManager.NavigateTo("/resetear-password");
    }

    private void Registrarse()
    {
        NavigationManager.NavigateTo("/registrarse");
    }

    public class UsuarioLogin
    {
        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "Ingrese un email válido")]
        public string Email { get; set; }

        [Required(ErrorMessage = "La contraseña es obligatoria")]
        [MinLength(6, ErrorMessage = "La contraseña debe tener al menos 6 caracteres")]
        public string Password { get; set; }
    }
}
