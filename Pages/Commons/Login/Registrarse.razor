@page "/registrarse"


@inject FirebaseAuthService AuthService
@inject NavigationManager NavigationManager

<div class="logincontainer">
    <h3>Registrarse</h3>

    @if (!string.IsNullOrEmpty(mensajeExito))
    {
        <div class="alert alert-success">
            <h4>¡Registro exitoso!</h4>
            <p>@mensajeExito</p>
            <p>Si no recibes el email en unos minutos, puedes solicitar uno nuevo:</p>
            <button class="btn btn-primary" @onclick="ReenviarEmail" disabled="@reenviandoEmail">
                @if (reenviandoEmail)
                {
                    <span>Enviando...</span>
                }
                else
                {
                    <span>Reenviar email de verificación</span>
                }
            </button>
            <div class="mt-3">
                <a href="/login" class="btn btn-link">Ir al login</a>
            </div>
        </div>
    }
    else
    {
        <EditForm Model="usuarioRegistro" OnValidSubmit="RegistrarUsuario">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="nombre">Nombre</label>
                <InputText id="nombre" class="form-control" @bind-Value="usuarioRegistro.Nombre" />
                <ValidationMessage For="@(() => usuarioRegistro.Nombre)" />
            </div>

            <div class="form-group">
                <label for="apellido">Apellido</label>
                <InputText id="apellido" class="form-control" @bind-Value="usuarioRegistro.Apellido" />
                <ValidationMessage For="@(() => usuarioRegistro.Apellido)" />
            </div>

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="usuarioRegistro.Email" />
                <ValidationMessage For="@(() => usuarioRegistro.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Contraseña</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="usuarioRegistro.Password" />
                <ValidationMessage For="@(() => usuarioRegistro.Password)" />
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirmar Contraseña</label>
                <InputText id="confirmPassword" class="form-control" type="password" @bind-Value="usuarioRegistro.ConfirmPassword" />
                <ValidationMessage For="@(() => usuarioRegistro.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn-registrarse" disabled="@registrando">
                @if (registrando)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Registrando...</span>
                }
                else
                {
                    <span>Registrarse</span>
                }
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(mensajeError))
        {
            <div class="alert alert-danger mt-3">
                @mensajeError
            </div>
        }

        <div class="mt-3 text-center">
            <a href="/login">¿Ya tienes cuenta? Inicia sesión aquí</a>
        </div>
    }
</div>

@code {
    private UsuarioRegistro usuarioRegistro = new UsuarioRegistro();
    private string mensajeError;
    private string mensajeExito;
    private bool registrando;
    private bool reenviandoEmail;

    private async Task RegistrarUsuario()
    {
        if (usuarioRegistro.Password != usuarioRegistro.ConfirmPassword)
        {
            mensajeError = "Error: Las contraseñas no coinciden";
            return;
        }

        registrando = true;
        mensajeError = string.Empty;

        try
        {
            var (userId, message) = await AuthService.RegisterUser(usuarioRegistro.Email, usuarioRegistro.Password, usuarioRegistro.Nombre, usuarioRegistro.Apellido);

            if (!string.IsNullOrEmpty(userId) && message == "verification-email-sent")
            {
                mensajeExito = $"Se ha enviado un email de verificación a {usuarioRegistro.Email}. " +
                              "Por favor, verifica tu email antes de iniciar sesión.";
            }
            else
            {
                mensajeError = "Error durante el registro: " + message;
            }
        }
        catch (Exception ex)
        {
            mensajeError = TraducirError(ex.Message);
        }
        finally
        {
            registrando = false;
        }
    }

    private async Task ReenviarEmail()
    {
        reenviandoEmail = true;
        try
        {
            var success = await AuthService.ResendVerificationEmail(usuarioRegistro.Email, usuarioRegistro.Password);
            if (success)
            {
                mensajeExito = $"Se ha reenviado el email de verificación a {usuarioRegistro.Email}";
            }
            else
            {
                mensajeError = "No se pudo reenviar el email de verificación";
            }
        }
        catch
        {
            mensajeError = "Error al reenviar el email de verificación";
        }
        finally
        {
            reenviandoEmail = false;
        }
    }

    private string TraducirError(string error)
    {
        return error.ToLower() switch
        {
            var e when e.Contains("email-already-in-use") => "Error: El email ya está registrado",
            var e when e.Contains("weak-password") => "Error: La contraseña es demasiado débil",
            var e when e.Contains("invalid-email") => "Error: El email no es válido",
            _ => $"Error: {error}"
        };
    }

    public class UsuarioRegistro
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        public string Nombre { get; set; }

        [Required(ErrorMessage = "El apellido es obligatorio")]
        public string Apellido { get; set; }

        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "Ingrese un email válido")]
        public string Email { get; set; }

        [Required(ErrorMessage = "La contraseña es obligatoria")]
        [MinLength(6, ErrorMessage = "La contraseña debe tener al menos 6 caracteres")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Debe confirmar la contraseña")]
        [Compare(nameof(Password), ErrorMessage = "Las contraseñas no coinciden")]
        public string ConfirmPassword { get; set; }
    }
}
Última edición hace 2 días



