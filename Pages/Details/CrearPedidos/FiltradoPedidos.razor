@page "/filtradopedidos"
@using WebNegocio.Enums

@inject GenericService<Pedido> pedidoService

@inject SweetAlertService sweetAlert
@inject NavigationManager NavigationManager


<h1>Resumen de Pedidos</h1>


    <!-- Filtro por Cliente -->
    <label>Cliente:</label>
    <select @bind="clienteSeleccionado">
        <option value="">Todos</option>
        @if (pedidos != null)
        {
            @foreach (var cliente in pedidos.Where(p => p.cliente != null).Select(p => p.cliente).DistinctBy(c => c.id))
            {
                <option value="@cliente.id">@cliente.apellidoNombre</option>
            }
        }
    </select>

    <!-- Filtro por Estado -->
    <label>Estado:</label>
    <select @bind="estadoSeleccionado">
        <option value="">Todos</option>
        @foreach (var estado in Enum.GetValues(typeof(EstadoPedidoEnum)).Cast<EstadoPedidoEnum>())
        {
            <option value="@estado">@estado</option>
        }
    </select>

    <!-- Filtro por Rubro -->
    <label>Rubro:</label>
    <select @bind="rubroSeleccionado">
        <option value="">Todos</option>
        @foreach (var rubro in Enum.GetValues(typeof(RubroEnum)).Cast<RubroEnum>())
        {
            <option value="@rubro">@rubro</option>
        }
    </select>

    <button @onclick="AplicarFiltros">Filtrar</button>

     <div>
            <NavLink class="nav-link" href=@($"crearpedidos")>
                <button class="btn btn-ver">Crear Pedido</button>
            </NavLink>
    </div>


@if (pedidosFiltrados == null)
{
    <p class="cargando">Cargando pedidos...</p>
}
else if (pedidosFiltrados.Count == 0)
{
    <p>No hay pedidos que coincidan con los filtros seleccionados.</p>
}
else
{
    <div class="contenedor-tabla" >
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID Pedido</th>
                <th>Cliente</th>
                <th>Fecha del Pedido</th>
                <th>Total Productos</th>
                <th>Total Impresiones</th>
                <th>Total Pedido</th>
                <th>Estado</th>
                <th>Acciones</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pedido in pedidosFiltrados)
            {
                <tr>
                    <td>@pedido.id</td>
                    <td>@pedido.cliente?.apellidoNombre</td> <!-- Validamos si cliente no es null -->
                    <td>@pedido.fechaPedido.ToShortDateString()</td>
                    <td>$ @pedido.DetallesProducto.Sum(p => p.total).ToString("F2")</td>
                    <td>$ @pedido.DetallesImpresion.Sum(i => i.total).ToString("F2")</td>
                    <td>$ @pedido.TotalPedido.ToString("F2")</td>
                    <td class="@GetEstadoClass(pedido.estadoPedido.ToString())">
                         @pedido.estadoPedido
                    </td>

                    <td>
                        <button title="detalle" class="detalle" @onclick="() => ToggleDetalle(pedido.id)">
                            <i class="bi bi-journal-text"></i>
                        </button>
                    </td>
                    <td>
                        <NavLink class="nav-link" href=@($"editarpedido?idPedido={pedido.id}")>
                            <button title="editar" class="editar" >
                           <i title="editar" class="bi bi-pencil-square"></i>
                        </button>
                        </NavLink>
                        </td
                     <td>
                        <button title="eliminar" class="eliminar" @onclick="() => EliminarPedido(pedido.id)">
                           <i class="bi bi-trash3-fill"></i>
                        </button>
                    </td>
                </tr>

                @if (mostrarDetalle == pedido.id)
                {
                    <tr>
                        <td colspan="8">
                            <div>
                                <h5>Detalles del Pedido</h5>
                                <ul>
                                    <li><strong>Productos:</strong></li>
                                    <ul>
                                        @foreach (var producto in pedido.DetallesProducto)
                                        {
                                            <li>Producto ID: @producto.producto?.nombre - Cantidad: @producto.cantidad - Subtotal: $ @producto.TotalF</li>
                                        }
                                    </ul>
                                    <li><strong>Impresiones:</strong></li>
                                    <ul>
                                        @foreach (var impresion in pedido.DetallesImpresion)
                                        {
                                            <li>Impresión ID: @impresion.impresion?.tamanio - Cantidad: @impresion.cantidad - Subtotal: $ @impresion.TotalF</li>
                                        }
                                    </ul>
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    </div>
}

@code {
    private List<Pedido> pedidos = new List<Pedido>();  // Inicializamos la lista
    private List<Pedido> pedidosFiltrados = new List<Pedido>();  // Inicializamos la lista
    private int? mostrarDetalle = null;
    private List<Pedido> pedido;

    private string clienteSeleccionado;
    private string estadoSeleccionado;
    private string rubroSeleccionado;

    protected override async Task OnInitializedAsync()
    {
        pedidos = await pedidoService.GetAllAsync() ?? new List<Pedido>();  // Aseguramos que no sea null
        pedidosFiltrados = pedidos; // Inicialmente muestra todos los pedidos
    }

    private void ToggleDetalle(int pedidoId)
    {
        mostrarDetalle = mostrarDetalle == pedidoId ? (int?)null : pedidoId;
    }

    private void AplicarFiltros()
    {
        if (pedidos == null || pedidos.Count == 0)
        {
            pedidosFiltrados = new List<Pedido>();  // Si no hay pedidos, lista vacía
            return;
        }

        // Convierte el estado seleccionado a EstadoPedidoEnum
        EstadoPedidoEnum? estadoSeleccionadoEnum = null;
        if (!string.IsNullOrEmpty(estadoSeleccionado))
        {
            if (Enum.TryParse<EstadoPedidoEnum>(estadoSeleccionado, out var estadoEnum))
            {
                estadoSeleccionadoEnum = estadoEnum;
            }
        }

        // Convierte el rubro seleccionado a RubroEnum
        RubroEnum? rubroSeleccionadoEnum = null;
        if (!string.IsNullOrEmpty(rubroSeleccionado))
        {
            if (Enum.TryParse<RubroEnum>(rubroSeleccionado, out var rubroEnum))
            {
                rubroSeleccionadoEnum = rubroEnum;
            }
        }

        pedidosFiltrados = pedidos.Where(p =>
            (string.IsNullOrEmpty(clienteSeleccionado) || p.cliente != null && p.cliente.id == int.Parse(clienteSeleccionado)) &&
            (estadoSeleccionadoEnum == null || p.estadoPedido == estadoSeleccionadoEnum) &&
            (rubroSeleccionadoEnum == null ||
                p.DetallesProducto.Any(dp => dp.producto?.Rubro == rubroSeleccionadoEnum) ||
                (rubroSeleccionadoEnum == RubroEnum.Fotografia && p.DetallesImpresion.Any()))
        ).ToList();
    }

    // Método para editar un pedido
   /* private async Task EditarPedido(int pedidoId)
    {
        // Busca el pedido por id
        var pedidoAEditar = pedidosFiltrados.FirstOrDefault(p => p.id == pedidoId);

        if (pedidoAEditar != null)
        {

            NavigationManager.NavigateTo($"editarpedido/{pedidoId}");
        }
    }*/

    // Método para eliminar un pedido
    private async Task EliminarPedido(int pedidoId)
    {
        try
        {
            SweetAlertResult respuesta = await sweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Borrando Pedido",
                    Text = $"¿Está seguro que desea borrar el pedido del cliente {clienteSeleccionado}",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Si, quiero borrarlo!",
                    CancelButtonText = "No, espera"
                });
            if (respuesta.IsConfirmed)
            {
                Console.WriteLine("Confirmación recibida. Eliminando el pedido..."); // Agrega este log
                await pedidoService.DeleteAsync(pedidoId);
                pedidos = await pedidoService.GetAllAsync();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Eliminación cancelada o fallida."); // Agrega este log para verificar si se cancela
            }
        }
        catch (Exception ex)
        {
            // Manejo de errores, puedes mostrar una alerta de error
            await sweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"No se pudo eliminar el pedido: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }

        
    }

    private string GetEstadoClass(string estado)
    {
        if (estado == "Enviado" || estado == "Entregado")
        {
            return "estado-rojo"; // Clase CSS personalizada
        }
        return ""; // Retorna una cadena vacía para otros estados
    }

}